data(airquality)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
airquality$Month
levels(airquality$Month)
str(airquality)
factor(airquality$Month)
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
?geom
?qplot
library(ggplot2)
g <- ggplot(movies, aes(votes, rating))
print(g)
qplot(votes, rating, data = movies)
qplot(votes, rating, data = movies, smooth = "loess")
qplot(votes, rating, data = movies) + geom_smooth()
qplot(votes, rating, data = movies) + stats_smooth("loess")
qplot(votes, rating, data = movies, panel = panel.loess)
setwd("~/Desktop/Project")
# Doe even friendlier column names
# Quiz 1 question 1 included a code book
# For joining training to test rbind is definitely appropriate. With the activity labels you cannot use rbind though because there are many, many y values that you want to apply the 6 activity label numbers to, so you need some strategy of applying a few activity labels to lots of data- merge is one solution, but you have to be careful of the ordering. Other solutions are possible (for example, subsetting and applying 6 times)
# You certainly can use the 561 in features text (and it is a lot better than V1, V2, etc), however most people do a little cleanup of them with gsub(). There are characters in the names (-,(,)) that will cause problems in analysis in R, most people feel t and f are a little cryptic so expand those, and "BodyBody" seems to be a engine mistake on the people who prepared the data, so you might want to correct that. Some people make quite a few changes.
setwd("UCI HAR Dataset")
# Read Test and Train data files and put them into individual R variables
subject_test <- read.table("test/subject_test.txt")
x_test <- read.table("test/X_test.txt")
y_test <- read.table("test/y_test.txt")
subject_train <- read.table("train/subject_train.txt")
x_train <- read.table("train/X_train.txt")
y_train <- read.table("train/y_train.txt")
# Merge Test data horizontally and Train data horizontally
data_test <- cbind(subject_test, y_test, x_test)
data_train <- cbind(subject_train, y_train, x_train)
# Merge Test and Train data vertically so that all data is in one table
data_all <- rbind(data_test, data_train)
# Name the variables using the information from the files we are given
features_names <- read.table("features.txt")
names(data_all) <- c("SubjectID","ActivityID", as.vector(features_names$V2))
# Read Activity Labels data and use it to create Activity (name)
activity_labels <- read.table("activity_labels.txt", col.names=c("ActivityID","Activity"))
data_all <- merge(data_all[,], activity_labels, sort=FALSE)
# Keep measure columns that are about mean (not menFreq) or standard deviation.
# Also the SubjectID and Activity columns and move Activity from last column to 2nd column
keep_colnames <- grep("*SubjectID|Activity|mean\\(|std*",colnames(data_all))
data_keep <- data_all[,keep_colnames]
last <- ncol(data_keep)
prelast <- last-1
data_keep <- data_keep[c(2,1,last,3:prelast)]
#data_keep <- data_keep[c(2,1,last,(3:last-1))]
# Create tidy data set by aggregating (using mean) by Subject and Activity
# Remove the two new columns that aggregate() introduces
# Remove Activity ID as we have user friendly Activity
data_tidy <- aggregate(data_keep, by=list(data_keep$SubjectID, data_keep$ActivityID, data_keep$Activity), FUN=mean, na.action=na.pass, na.rm=TRUE)[,-1:-3]
data_tidy$ActivityID <- NULL
heaD(data_tidy)
head(data_tidy)
str(data_tidy)
data_tidy <- aggregate(data_keep, by=list(data_keep$SubjectID,data_keep$Activity), FUN=mean, na.action=na.pass, na.rm=TRUE)[,-1:-3]
str(data_tidy[1:5])
# Name the variables using the information from the files we are given
features_names <- read.table("features.txt")
names(data_all) <- c("SubjectID","ActivityID", as.vector(features_names$V2))
# Read Activity Labels data and use it to create Activity (name)
activity_labels <- read.table("activity_labels.txt", col.names=c("ActivityID","Activity"))
data_all <- merge(data_all[,], activity_labels, sort=FALSE)
# Keep measure columns that are about mean (not menFreq) or standard deviation.
# Also the SubjectID and Activity columns and move Activity from last column to 2nd column
keep_colnames <- grep("*SubjectID|Activity|mean\\(|std*",colnames(data_all))
data_keep <- data_all[,keep_colnames]
last <- ncol(data_keep)
prelast <- last-1
#data_keep <- data_keep[c(2,1,last,3:prelast)]
data_keep <- data_keep[c(2,1,last,(3:last-1))]
# Create tidy data set by aggregating (using mean) by Subject and Activity
# Remove the two new columns that aggregate() introduces
# Remove Activity ID as we have user friendly Activity
data_tidy <- aggregate(data_keep, by=list(data_keep$SubjectID,data_keep$Activity), FUN=mean, na.action=na.pass, na.rm=TRUE)[,-1:-3]
data_tidy$ActivityID <- NULL
str(data_keep)
data_keep <- data_all[,keep_colnames]
last <- ncol(data_keep)
prelast <- last-1
#data_keep <- data_keep[c(2,1,last,3:prelast)]
data_keep <- data_keep[c(2,1,last,(3:last-1))]
# Create tidy data set by aggregating (using mean) by Subject and Activity
# Remove the two new columns that aggregate() introduces
# Remove Activity ID as we have user friendly Activity
data_tidy <- aggregate(data_keep, by=list(data_keep$SubjectID,data_keep$Activity), FUN=mean, na.action=na.pass, na.rm=TRUE)
#[,-1:-3]
data_tidy$ActivityID <- NULL
str(data_keep[1:5])
# Doe even friendlier column names
# Quiz 1 question 1 included a code book
# For joining training to test rbind is definitely appropriate. With the activity labels you cannot use rbind though because there are many, many y values that you want to apply the 6 activity label numbers to, so you need some strategy of applying a few activity labels to lots of data- merge is one solution, but you have to be careful of the ordering. Other solutions are possible (for example, subsetting and applying 6 times)
# You certainly can use the 561 in features text (and it is a lot better than V1, V2, etc), however most people do a little cleanup of them with gsub(). There are characters in the names (-,(,)) that will cause problems in analysis in R, most people feel t and f are a little cryptic so expand those, and "BodyBody" seems to be a engine mistake on the people who prepared the data, so you might want to correct that. Some people make quite a few changes.
setwd("UCI HAR Dataset")
# Read Test and Train data files and put them into individual R variables
subject_test <- read.table("test/subject_test.txt")
x_test <- read.table("test/X_test.txt")
y_test <- read.table("test/y_test.txt")
subject_train <- read.table("train/subject_train.txt")
x_train <- read.table("train/X_train.txt")
y_train <- read.table("train/y_train.txt")
# Merge Test data horizontally and Train data horizontally
data_test <- cbind(subject_test, y_test, x_test)
data_train <- cbind(subject_train, y_train, x_train)
# Merge Test and Train data vertically so that all data is in one table
data_all <- rbind(data_test, data_train)
# Name the variables using the information from the files we are given
features_names <- read.table("features.txt")
names(data_all) <- c("SubjectID","ActivityID", as.vector(features_names$V2))
# Read Activity Labels data and use it to create Activity (name)
activity_labels <- read.table("activity_labels.txt", col.names=c("ActivityID","Activity"))
data_all <- merge(data_all[,], activity_labels, sort=FALSE)
# Keep measure columns that are about mean (not menFreq) or standard deviation.
# Also the SubjectID and Activity columns and move Activity from last column to 2nd column
keep_colnames <- grep("*SubjectID|Activity|mean\\(|std*",colnames(data_all))
data_keep <- data_all[,keep_colnames]
last <- ncol(data_keep)
prelast <- last-1
#data_keep <- data_keep[c(2,1,last,3:prelast)]
data_keep <- data_keep[c(2,1,last,(3:last-1))]
# Create tidy data set by aggregating (using mean) by Subject and Activity
# Remove the two new columns that aggregate() introduces
# Remove Activity ID as we have user friendly Activity
data_tidy <- aggregate(data_keep, by=list(data_keep$SubjectID,data_keep$Activity), FUN=mean, na.action=na.pass, na.rm=TRUE)
#[,-1:-3]
data_tidy$ActivityID <- NULL
# Output file to be uploaded for the assignemnt
write.table(data_tidy,"../data_tidy.txt",sep=",")
str(data_keep[1:5])
str(data_tidy[1:5])
colnames(data_tidy[,1:2])
colnames(data_tidy[,1:2]) <- c("SubjectID","Activity")
colnames(data_tidy[,1:2])
names(data_tidy[1:2])
names(data_tidy[1:2]) <- c("SubjectID","Activity")
names(data_tidy[1:2])
names(data_tidy)
names(data_tidy) <- c("SubjectID","Activity")
names(data_tidy)
keep_colnames <- grep("*SubjectID|Activity|mean\\(|std*",colnames(data_all))
data_keep <- data_all[,keep_colnames]
last <- ncol(data_keep)
prelast <- last-1
#data_keep <- data_keep[c(2,1,last,3:prelast)]
data_keep <- data_keep[c(2,1,last,(3:last-1))]
data_tidy$ActivityID <- NULL
# Create tidy data set by aggregating (using mean) by Subject and Activity
# Keep the two new columns that aggregate() introduces and remove the old ones (SubjectID and Activity)
# Rename new ones to friendly names
data_tidy <- aggregate(data_keep, by=list(data_keep$SubjectID,data_keep$Activity), FUN=mean, na.action=na.pass, na.rm=TRUE)[,-3:-4]
names(data_tidy) <- c("SubjectID","Activity",names(data_tidy[-1:-2]))
names(data_tidy)
str(data_tidy)
keep_colnames <- grep("*SubjectID|Activity|mean\\(|std*",colnames(data_all))
data_keep <- data_all[,keep_colnames]
last <- ncol(data_keep)
prelast <- last-1
#data_keep <- data_keep[c(2,1,last,3:prelast)]
data_keep <- data_keep[c(2,1,last,(3:last-1))]
data_keep$ActivityID <- NULL
# Create tidy data set by aggregating (using mean) by Subject and Activity
# Keep the two new columns that aggregate() introduces and remove the old ones (SubjectID and Activity)
# Rename new ones to friendly names
data_tidy <- aggregate(data_keep, by=list(data_keep$SubjectID,data_keep$Activity), FUN=mean, na.action=na.pass, na.rm=TRUE)
names(data_tidy) <- c("SubjectID","Activity",names(data_tidy[-1:-2]))
str(data_tidy)
setwd("UCI HAR Dataset")
# Read Test and Train data files and put them into individual R variables
subject_test <- read.table("test/subject_test.txt")
x_test <- read.table("test/X_test.txt")
y_test <- read.table("test/y_test.txt")
subject_train <- read.table("train/subject_train.txt")
x_train <- read.table("train/X_train.txt")
y_train <- read.table("train/y_train.txt")
# Merge Test data horizontally and Train data horizontally
data_test <- cbind(subject_test, y_test, x_test)
data_train <- cbind(subject_train, y_train, x_train)
# Merge Test and Train data vertically so that all data is in one table
data_all <- rbind(data_test, data_train)
# Name the variables using the information from the files we are given
features_names <- read.table("features.txt")
names(data_all) <- c("SubjectID","ActivityID", as.vector(features_names$V2))
# Read Activity Labels data and use it to create Activity (name)
activity_labels <- read.table("activity_labels.txt", col.names=c("ActivityID","Activity"))
data_all <- merge(data_all[,], activity_labels, sort=FALSE)
# Keep measure columns that are about mean (not menFreq) or standard deviation.
# Also the SubjectID and Activity columns and move Activity from last column to 2nd column
# Remove Activity ID as we have user friendly Activity
keep_colnames <- grep("*SubjectID|Activity|mean\\(|std*",colnames(data_all))
data_keep <- data_all[,keep_colnames]
last <- ncol(data_keep)
prelast <- last-1
#data_keep <- data_keep[c(2,1,last,3:prelast)]
data_keep <- data_keep[c(2,1,last,(3:last-1))]
data_keep$ActivityID <- NULL
# Create tidy data set by aggregating (using mean) by Subject and Activity
# Keep the two new columns that aggregate() introduces and remove the old ones (SubjectID and Activity)
# Rename new ones to friendly names
data_tidy <- aggregate(data_keep, by=list(data_keep$SubjectID,data_keep$Activity), FUN=mean, na.action=na.pass, na.rm=TRUE)
names(data_tidy) <- c("SubjectID","Activity",names(data_tidy[-1:-2]))
str(data_keep)
str(data_all)
data_keep <- data_all[,keep_colnames]
last <- ncol(data_keep)
prelast <- last-1
#data_keep <- data_keep[c(2,1,last,3:prelast)]
data_keep <- data_keep[c(2,1,last,(3:(last-1))]
data_keep$ActivityID <- NULL
str(data_keep)
data_all <- merge(data_all[,], activity_labels, sort=FALSE)
data_all$ActivityID <- NULL
# Keep measure columns that are about mean (not menFreq) or standard deviation.
# Also the SubjectID and Activity columns and move Activity from last column to 2nd column
keep_colnames <- grep("*SubjectID|Activity|mean\\(|std*",colnames(data_all))
data_keep <- data_all[,keep_colnames]
last <- ncol(data_keep)
prelast <- last-1
#data_keep <- data_keep[c(2,1,last,3:prelast)]
data_keep <- data_keep[c(1,last,(3:(last-1))]
data_keep <- data_keep[c(1,last,(3:(last-1)))]
str(data_keep)
data_keep <- data_all[,keep_colnames]
last <- ncol(data_keep)
prelast <- last-1
data_keep <- data_keep[c(1,last,3:prelast)]
str(data_keep)
str(data_all)
data_all <- merge(data_all[,], activity_labels, sort=FALSE)
data_all$ActivityID <- NULL
# Keep measure columns that are about mean (not menFreq) or standard deviation.
# Also the SubjectID and Activity columns and move Activity from last column to 2nd column
keep_colnames <- grep("*SubjectID|Activity|mean\\(|std*",colnames(data_all))
data_keep <- data_all[,keep_colnames]
last <- ncol(data_keep)
prelast <- last-1
#data_keep <- data_keep[c(2,1,last,3:prelast)]
data_keep <- data_keep[c(2,1,3:last)]
str(data_keep)
activity_labels <- read.table("activity_labels.txt", col.names=c("ActivityID","Activity"))
data_all <- merge(data_all[,], activity_labels, sort=FALSE)
data_all$ActivityID <- NULL
# Keep measure columns that are about mean (not menFreq) or standard deviation.
# Also the SubjectID and Activity columns (reverse their order)
keep_colnames <- grep("*SubjectID|Activity|mean\\(|std*",colnames(data_all))
data_keep <- data_all[,keep_colnames]
data_keep <- data_keep[c(2,1,-1:-2)]
data_keep <- data_keep[c(2,1,3:ncol(data_keep)]
data_keep <- data_keep[c(2,1,3:(ncol(data_keep)))]
str(data_keep)
data_keep <- data_keep[c(2,1,3:ncol(data_keep))]
str(data_keep)
data_keep <- data_keep[c(2,1,3:ncol(data_keep))]
data_tidy <- aggregate(data_keep, by=list(data_keep$SubjectID,data_keep$Activity), FUN=mean, na.action=na.pass, na.rm=TRUE)
str(data_tidy)
data_tidy <- aggregate(data_keep, by=list(data_keep$SubjectID,data_keep$Activity), FUN=mean, na.action=na.pass, na.rm=TRUE)[-3:-4]
str(data_tidy)
names(data_tidy) <- c("SubjectID","Activity",names(data_tidy[-1:-2]))
str(data_tidy)
write.table(data_tidy[1:4],"../data_tidy.txt",sep=",")
write.table(data_tidy[1:4],"../data_tidy.txt",sep=",",row.names=FALSE)
?aggregate
?sort
?merge
head(data_all)
data_all <- rbind(data_test, data_train)
# Name the variables using the information from the files we are given
features_names <- read.table("features.txt")
names(data_all) <- c("SubjectID","ActivityID", as.vector(features_names$V2))
# Read Activity Labels data and use it to create Activity (name)
# Remove Activity ID as we have user friendly Activity
activity_labels <- read.table("activity_labels.txt", col.names=c("ActivityID","Activity"))
data_all <- merge(data_all[,], activity_labels)
data_all$ActivityID <- NULL
head(data_all[,1:5])
?gsub
names(data_all[3])
gsub("-","",names(data_all[3]))
names(data_all[3])
gsub("(,|\\(|\\)","",names(data_all[3]))
gsub(",|\\(|\\","",names(data_all[3]))
gsub(",|(|)","",names(data_all[3]))
gsub(",|\(|\)","",names(data_all[3]))
gsub(",|\\(|\\)","",names(data_all[3]))
gsub("Acc", "Accelerometer", gsub("Gyr", "Gyroscope", gsub(",|\\(|\\)","",names(data_all))))
gsub("Acc", "Accelerometer", gsub("Gyr0", "Gyroscope", gsub(",|\\(|\\)","",names(data_all))))
gsub("Bodybody", "Body",  gsub("Acc", "Accelerometer", gsub("Gyr0", "Gyroscope", gsub(",|\\(|\\)","",names(data_all)))))
gsub("BodyBody", "Body",  gsub("Acc", "Accelerometer", gsub("Gyr0", "Gyroscope", gsub(",|\\(|\\)","",names(data_all)))))
gsub("^f","fft",gsub("BodyBody", "Body",  gsub("Acc", "Accelerometer", gsub("Gyr0", "Gyroscope", gsub(",|\\(|\\)","",names(data_all))))))
gsub("^f","fft-",gsub("BodyBody", "Body",  gsub("Acc", "Accelerometer", gsub("Gyr0", "Gyroscope", gsub(",|\\(|\\)","",names(data_all))))))
gsub("^t","time-",gsub("^f","fft-",gsub("BodyBody", "Body",  gsub("Acc", "Accelerometer", gsub("Gyr0", "Gyroscope", gsub(",|\\(|\\)","",names(data_all)))))))
gsub("^t","time-",gsub("^f","fft-",gsub("BodyBody", "Body",  gsub("Acc", "Accelerometer", gsub("Gyro", "Gyroscope", gsub("Mag","Magnitude", gsub(",|\\(|\\)","",names(data_all))))))))
gsub(",|\\(|\\)","", gsub("^t","time-",gsub("^f","fft-",gsub("BodyBody", "Body",  gsub("Acc", "Accelerometer", gsub("Gyro", "Gyroscope", gsub("Mag","Magnitude", names(data_all))))))))
gsub(",|\\(|\\)", "", gsub("[0-9],[0-9]", " to " , gsub("^t", "time-", gsub("^f", "fft-", gsub("BodyBody", "Body", gsub("Acc", "Accelerometer", gsub("Gyro", "Gyroscope", gsub("Mag","Magnitude", names(data_all)))))))))
gsub(",|\\(|\\)", "", gsub("[0-9],[0-9]", "_to_" , gsub("^t", "time-", gsub("^f", "fft-", gsub("BodyBody", "Body", gsub("Acc", "Accelerometer", gsub("Gyro", "Gyroscope", gsub("Mag","Magnitude", names(data_all)))))))))
gsub(",|\\(|\\)", "", gsub("\\d,\\d", "_to_" , gsub("^t", "time-", gsub("^f", "fft-", gsub("BodyBody", "Body", gsub("Acc", "Accelerometer", gsub("Gyro", "Gyroscope", gsub("Mag","Magnitude", names(data_all)))))))))
gsub(",|\\(|\\)", "", gsub("\\d,\\d", "\\1_to_\\2" , gsub("^t", "time-", gsub("^f", "fft-", gsub("BodyBody", "Body", gsub("Acc", "Accelerometer", gsub("Gyro", "Gyroscope", gsub("Mag","Magnitude", names(data_all)))))))))
# Doe even friendlier column names
# Quiz 1 question 1 included a code book
# For joining training to test rbind is definitely appropriate. With the activity labels you cannot use rbind though because there are many, many y values that you want to apply the 6 activity label numbers to, so you need some strategy of applying a few activity labels to lots of data- merge is one solution, but you have to be careful of the ordering. Other solutions are possible (for example, subsetting and applying 6 times)
# You certainly can use the 561 in features text (and it is a lot better than V1, V2, etc), however most people do a little cleanup of them with gsub(). There are characters in the names (-,(,)) that will cause problems in analysis in R, most people feel t and f are a little cryptic so expand those, and "BodyBody" seems to be a engine mistake on the people who prepared the data, so you might want to correct that. Some people make quite a few changes.
setwd("UCI HAR Dataset")
# Read Test and Train data files and put them into individual R variables
subject_test <- read.table("test/subject_test.txt")
x_test <- read.table("test/X_test.txt")
y_test <- read.table("test/y_test.txt")
subject_train <- read.table("train/subject_train.txt")
x_train <- read.table("train/X_train.txt")
y_train <- read.table("train/y_train.txt")
# Merge Test data horizontally and Train data horizontally
data_test <- cbind(subject_test, y_test, x_test)
data_train <- cbind(subject_train, y_train, x_train)
# Merge Test and Train data vertically so that all data is in one table
data_all <- rbind(data_test, data_train)
# Name the variables using the information from the files we are given
features_names <- read.table("features.txt")
names(data_all) <- c("SubjectID","ActivityID", as.vector(features_names$V2))
# Read Activity Labels data and use it to create Activity (name)
# Remove Activity ID as we have user friendly Activity
activity_labels <- read.table("activity_labels.txt", col.names=c("ActivityID","Activity"))
data_all <- merge(data_all[,], activity_labels, sort=FALSE)
data_all$ActivityID <- NULL
# Keep measure columns that are about mean (not menFreq) or standard deviation.
# Also the SubjectID and Activity columns (reverse their order)
keep_colnames <- grep("*SubjectID|Activity|mean\\(|std*",colnames(data_all))
data_keep <- data_all[,keep_colnames]
data_keep <- data_keep[c(2,1,3:ncol(data_keep))]
# Create user friendly columnn names for the measures by:
#    Replacing initial "t" with "time-"
#    Replacing initital "f" with "fft-"
#    Replacing "BodyBody" with "Body"
#    Replacing "Acc" with "Accelerometer"
#    Replacing "Gyro" with "Gyroscope"
#    Replacing "Mag" with "Magnitude"
#    Replacing "," with " to " when between numbers (e.g. 1,8 becomes 1 to 8)
#    Removing "(", ")" and ","
names(data_all) <- gsub(",|\\(|\\)", "", gsub("^t", "time-", gsub("^f", "fft-", gsub("BodyBody", "Body", gsub("Acc", "Accelerometer", gsub("Gyro", "Gyroscope", gsub("Mag","Magnitude", names(data_all))))))))
#gsub("\\d,\\d", "\\1_to_\\2", names(data_all)
#gsub(",|\\(|\\)", "", gsub("^t", "time-", gsub("^f", "fft-", gsub("BodyBody", "Body", gsub("Acc", "Accelerometer", gsub("Gyro", "Gyroscope", gsub("Mag","Magnitude", names(data_all))))))))
# Create tidy data set by aggregating (using mean) by Subject and Activity
# Keep the two new columns that aggregate() introduces and remove the old ones (SubjectID and Activity)
# Rename new ones to friendly names
data_tidy <- aggregate(data_keep, by=list(data_keep$SubjectID,data_keep$Activity), FUN=mean, na.action=na.pass, na.rm=TRUE)[-3:-4]
names(data_tidy) <- c("SubjectID","Activity",names(data_tidy[-1:-2]))
# Output file to be uploaded for the assignemnt
write.table(data_tidy[1:4],"../data_tidy.txt",sep=",",row.names=FALSE)
names(data_tidy)
#write.table(data_tidy[1:4],"../data_tidy.txt",sep=",",row.names=FALSE)
# Doe even friendlier column names
# Quiz 1 question 1 included a code book
# For joining training to test rbind is definitely appropriate. With the activity labels you cannot use rbind though because there are many, many y values that you want to apply the 6 activity label numbers to, so you need some strategy of applying a few activity labels to lots of data- merge is one solution, but you have to be careful of the ordering. Other solutions are possible (for example, subsetting and applying 6 times)
# You certainly can use the 561 in features text (and it is a lot better than V1, V2, etc), however most people do a little cleanup of them with gsub(). There are characters in the names (-,(,)) that will cause problems in analysis in R, most people feel t and f are a little cryptic so expand those, and "BodyBody" seems to be a engine mistake on the people who prepared the data, so you might want to correct that. Some people make quite a few changes.
setwd("UCI HAR Dataset")
# Read Test and Train data files and put them into individual R variables
subject_test <- read.table("test/subject_test.txt")
x_test <- read.table("test/X_test.txt")
y_test <- read.table("test/y_test.txt")
subject_train <- read.table("train/subject_train.txt")
x_train <- read.table("train/X_train.txt")
y_train <- read.table("train/y_train.txt")
# Merge Test data horizontally and Train data horizontally
data_test <- cbind(subject_test, y_test, x_test)
data_train <- cbind(subject_train, y_train, x_train)
# Merge Test and Train data vertically so that all data is in one table
data_all <- rbind(data_test, data_train)
# Name the variables using the information from the files we are given
features_names <- read.table("features.txt")
names(data_all) <- c("SubjectID","ActivityID", as.vector(features_names$V2))
# Read Activity Labels data and use it to create Activity (name)
# Remove Activity ID as we have user friendly Activity
activity_labels <- read.table("activity_labels.txt", col.names=c("ActivityID","Activity"))
data_all <- merge(data_all[,], activity_labels, sort=FALSE)
data_all$ActivityID <- NULL
# Keep measure columns that are about mean (not menFreq) or standard deviation.
# Also the SubjectID and Activity columns (reverse their order)
keep_colnames <- grep("*SubjectID|Activity|mean\\(|std*",colnames(data_all))
data_keep <- data_all[,keep_colnames]
data_keep <- data_keep[c(2,1,3:ncol(data_keep))]
# Create user friendly columnn names for the measures by:
#    Replacing initial "t" with "time-"
#    Replacing initital "f" with "fft-"
#    Replacing "BodyBody" with "Body"
#    Replacing "Acc" with "Accelerometer"
#    Replacing "Gyro" with "Gyroscope"
#    Replacing "Mag" with "Magnitude"
#    Replacing "," with " to " when between numbers (e.g. 1,8 becomes 1 to 8)
#    Removing "(", ")" and ","
names(data_keep) <- gsub(",|\\(|\\)", "", gsub("^t", "time-", gsub("^f", "fft-", gsub("BodyBody", "Body", gsub("Acc", "Accelerometer", gsub("Gyro", "Gyroscope", gsub("Mag","Magnitude", names(data_keep))))))))
#gsub("\\d,\\d", "\\1_to_\\2", names(data_all)
#gsub(",|\\(|\\)", "", gsub("^t", "time-", gsub("^f", "fft-", gsub("BodyBody", "Body", gsub("Acc", "Accelerometer", gsub("Gyro", "Gyroscope", gsub("Mag","Magnitude", names(data_all))))))))
# Create tidy data set by aggregating (using mean) by Subject and Activity
# Keep the two new columns that aggregate() introduces and remove the old ones (SubjectID and Activity)
# Rename new ones to friendly names
#data_tidy <- aggregate(data_keep, by=list(data_keep$SubjectID,data_keep$Activity), FUN=mean, na.action=na.pass, na.rm=TRUE)[-3:-4]
#names(data_tidy) <- c("SubjectID","Activity",names(data_tidy[-1:-2]))
data_tidy <- aggregate(. ~ SubjectID + Activity, data_keep, FUN=mean, na.action=na.pass, na.rm=TRUE)
# Output file to be uploaded for the assignemnt
#write.table(data_tidy[1:4],"../data_tidy.txt",sep=",",row.names=FALSE)
names(data_tidy)
head(data_tidy)
head(data_tidy[1:5])
author: "Georgios Kaperonis"
---
title: "Readme"
author: "Georgios Kaperonis"
date: "27 July 2014"
output: html_document
---
This is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see <http://rmarkdown.rstudio.com>.
When you click the **Knit** button a document will be generated that includes both content as well as the output of any embedded R code chunks within the document. You can embed an R code chunk like this:
```{r}
summary(cars)
```
You can also embed plots, for example:
```{r, echo=FALSE}
plot(cars)
```
Note that the `echo = FALSE` parameter was added to the code chunk to prevent printing of the R code that generated the plot.
?read.table
data_train <- cbind(subject_train, y_train, x_train)
# Quiz 1 question 1 included a code book
setwd("UCI HAR Dataset")
# Read Test and Train data files and put them into individual R variables
subject_test <- read.table("test/subject_test.txt")
x_test <- read.table("test/X_test.txt")
y_test <- read.table("test/y_test.txt")
subject_train <- read.table("train/subject_train.txt")
x_train <- read.table("train/X_train.txt")
y_train <- read.table("train/y_train.txt")
# Merge Test data horizontally and Train data horizontally
data_test <- cbind(subject_test, y_test, x_test)
data_train <- cbind(subject_train, y_train, x_train)
# Merge Test and Train data vertically so that all data is in one table
data_all <- rbind(data_test, data_train)
# Name the variables using the information from the files we are given
features_names <- read.table("features.txt")
names(data_all) <- c("SubjectID","ActivityID", as.vector(features_names$V2))
# Read Activity Labels data and use it to create Activity (name)
# Remove Activity ID as we have user friendly Activity
activity_labels <- read.table("activity_labels.txt", col.names=c("ActivityID","Activity"))
data_all <- merge(data_all[,], activity_labels, sort=FALSE)
data_all$ActivityID <- NULL
# Keep measure columns that are about mean (not menFreq) or standard deviation.
# Also the SubjectID and Activity columns (reverse their order)
keep_colnames <- grep("*SubjectID|Activity|mean\\(|std*",colnames(data_all))
data_keep <- data_all[,keep_colnames]
data_keep <- data_keep[c(2,1,3:ncol(data_keep))]
# Create user friendly columnn names for the measures by:
#    Replacing initial "t" with "time-"
#    Replacing initital "f" with "fft-"
#    Replacing "BodyBody" with "Body"
#    Replacing "Acc" with "Accelerometer"
#    Replacing "Gyro" with "Gyroscope"
#    Replacing "Mag" with "Magnitude"
#    Removing "(", ")" and ","
names(data_keep) <- gsub(",|\\(|\\)", "", gsub("^t", "time-", gsub("^f", "fft-", gsub("BodyBody", "Body", gsub("Acc", "Accelerometer", gsub("Gyro", "Gyroscope", gsub("Mag","Magnitude", names(data_keep))))))))
# Create tidy data set by aggregating (using mean) by SubjectID and Activity
data_tidy <- aggregate(. ~ SubjectID + Activity, data_keep, FUN=mean, na.action=na.pass, na.rm=TRUE)
# Output file to be uploaded for the assignemnt
write.table(data_tidy[1:4],"../data_tidy.txt",sep=",",row.names=FALSE)
# Quiz 1 question 1 included a code book
setwd("UCI HAR Dataset")
# Read Test and Train data files and put them into individual R variables
subject_test <- read.table("test/subject_test.txt")
x_test <- read.table("test/X_test.txt")
y_test <- read.table("test/y_test.txt")
subject_train <- read.table("train/subject_train.txt")
x_train <- read.table("train/X_train.txt")
y_train <- read.table("train/y_train.txt")
# Merge Test data horizontally and Train data horizontally
data_test <- cbind(subject_test, y_test, x_test)
data_train <- cbind(subject_train, y_train, x_train)
# Merge Test and Train data vertically so that all data is in one table
data_all <- rbind(data_test, data_train)
# Name the variables using the information from the files we are given
features_names <- read.table("features.txt")
names(data_all) <- c("SubjectID","ActivityID", as.vector(features_names$V2))
# Read Activity Labels data and use it to create Activity (name)
# Remove Activity ID as we have user friendly Activity
activity_labels <- read.table("activity_labels.txt", col.names=c("ActivityID","Activity"))
data_all <- merge(data_all[,], activity_labels, sort=FALSE)
data_all$ActivityID <- NULL
# Keep measure columns that are about mean (not menFreq) or standard deviation.
# Also the SubjectID and Activity columns (reverse their order)
keep_colnames <- grep("*SubjectID|Activity|mean\\(|std*",colnames(data_all))
data_keep <- data_all[,keep_colnames]
data_keep <- data_keep[c(2,1,3:ncol(data_keep))]
# Create user friendly columnn names for the measures by:
#    Replacing initial "t" with "time-"
#    Replacing initital "f" with "fft-"
#    Replacing "BodyBody" with "Body"
#    Replacing "Acc" with "Accelerometer"
#    Replacing "Gyro" with "Gyroscope"
#    Replacing "Mag" with "Magnitude"
#    Removing "(", ")" and ","
names(data_keep) <- gsub(",|\\(|\\)", "", gsub("^t", "time-", gsub("^f", "fft-", gsub("BodyBody", "Body", gsub("Acc", "Accelerometer", gsub("Gyro", "Gyroscope", gsub("Mag","Magnitude", names(data_keep))))))))
# Create tidy data set by aggregating (using mean) by SubjectID and Activity
data_tidy <- aggregate(. ~ SubjectID + Activity, data_keep, FUN=mean, na.action=na.pass, na.rm=TRUE)
# Output file to be uploaded for the assignemnt
write.table(data_tidy,"../data_tidy.txt",sep=",",row.names=FALSE)
View(features_names)
View(features_names)
- Creates the aggregated dataset (using mean for all measures) and exports to commma-separates file
colnames(data_tidy)
write_table(colnames(data_tidy),"../temp.txt",row.names=FALSE)
write.table(colnames(data_tidy),"../temp.txt",row.names=FALSE)
str(data_tidy)
?write.table
write.table(colnames(data_tidy),"../temp.txt",row.names=FALSE,quote=FALSE)
dim(data_tidy)
